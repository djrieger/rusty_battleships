login: low prio: NameTakenResponse bei doppeltem Einloggen falsch

player_names kann raus

handle_ready_Request: invalid if in game

handle_not_ready: Zustände verdreht


handle_challenge_player: statt not_Waiting bei game.is_some() GameAlreadyStarted returnen

NOtYourTurnResponse einführen überall wo nötig. Immer dann schicken, wenn Game in Endzustand existiert (durch Timer für kurze Zeit sicher gestellt). Sonst InvalidRequestResponse


Mailingliste: NOT_YOUR_TURN müsste anders heißen, da es für untgültige SurrenderRequest auch verwendet wird. Alternative: Bei allen anderen ungültigen Requests doch wieder InvalidRequestResponse ist keine Lösung, weil Verbindung beendet wird.

handle_surrender: if game ended { warte auf ggf. RFC-Änderung }. if game ended { not your turn } 
-- opponent muss victorious: true bekommen
-- wieder Mailingliste: Bei Surrender muss OkResponse kommen, Update ist ungültig

server.rs handle_client: InvalidRequestResponse || Err(e) => msg to main thread: please shut down player
-- falls e = TCPConnectionClosed: No response
-- else e = request_msg syntax error: respond accordingly

handle_report_Error: delegiere an terminate_player: 
  - do not delete game but launch end timer and state = Ended

terminate_player:
 - terminate_game
 - remove player from lobby

terminate_game(who did it): inform players + game state = Ended

handle_place_ships:
  if game && game state = Placing
  if Ended: NOT_YOUR_TURN 
  if Playing: InvalidRequestResponse
  absteigende schiffslänge
  HP korrekt?
  if board not empty -> terminate(invalidrequest)
  if success and other board not empty -> launch game { game state = Playing, YourTurn, EnemyTur updates to players }

handle_move_shoot: if game && game state Playing && my turn -> else NotYourTurn else terminate(invalid)
Mailingliste: alle use cases für NOT_YOUR_TURN auflisten,
Spieler wechseln: game.switch(), YOURTURN, ENEMYTURN Updates schicken, Timer resetten

game braucht: letzter zugbeginn timestamp
main loop: iterate over games, check for exceeded times -> handle: ignore if game state != Playing or != Ended } (AFK bzw. game wirklich löschen)
game braucht noch pro player exceeded_count

ready/start/...: if game 
    if game ended { player.game = None; }


prevent 100% CPU load:
http://japaric.github.io/rbe/timers.html


global: statt InvalidRequestResponse terminate_player (fast immer)

Game state
 - Timer
 - state { Placing, Playing, Ended }
 - active_player

